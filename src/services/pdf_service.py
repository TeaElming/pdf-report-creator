from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
import base64
import io
from PIL import Image as PILImage
from services.template_generator import TemplateGenerator
from services.data_structures import DataExtractor


def generate_pdf(filename, raw_json, structure="standard", template_name="corporate", json_path="templates.json"):
  """
  Generates a PDF using extracted data from raw JSON input with a specified template fetched from the JSON file.
  """
  # Fetch template data
  template_gen = TemplateGenerator(json_path)
  template = template_gen.fetch_template(template_name)

  # Extract data
  extracted_data = DataExtractor.extract_standard(raw_json)

  # Set up the PDF
  file_path = f"{filename}.pdf"
  doc = SimpleDocTemplate(file_path, pagesize=A4)
  styles = getSampleStyleSheet()

  # Apply styling from the template
  styling = template["styling"]
  title_style = ParagraphStyle(
      "TitleStyle",
      parent=styles["Title"],
      textColor=colors.HexColor(
          styling["text_colors"].get("title_color", "#000000")),
      fontName=styling.get("font_family", "Helvetica"),
      fontSize=styling.get("font_size", 12)
  )
  body_text_style = ParagraphStyle(
      "BodyTextStyle",
      parent=styles["BodyText"],
      textColor=colors.HexColor(
          styling["text_colors"].get("text_color", "#000000")),
      fontName=styling.get("font_family", "Helvetica"),
      fontSize=styling.get("font_size", 12)
  )

  story = []

  # Add Header (Logo and Naming)
  header = template["header"]
  if header["logo"]:
    if isinstance(header["logo"], PILImage.Image):  # Base64-decoded PIL Image
      buffer = io.BytesIO()
      header["logo"].save(buffer, format="PNG")
      buffer.seek(0)
      story.append(Image(buffer, width=100, height=50))
    else:  # Assume it's a file path or other valid image data
      story.append(Image(header["logo"], width=100, height=50))
    story.append(Spacer(1, 12))
  if header["naming"]:
    story.append(Paragraph(header["naming"], title_style))
    story.append(Spacer(1, 12))

  # Add Report Title and Description
  story.append(Paragraph(extracted_data["report_title"], title_style))
  story.append(Spacer(1, 12))
  story.append(
      Paragraph(extracted_data["report_description"], body_text_style))
  story.append(Spacer(1, 24))

  # Add Contents
  for section in extracted_data["contents"]:
    story.append(Paragraph(section["title"], styles["Heading2"]))
    story.append(Spacer(1, 12))
    story.append(Paragraph(section["text"], body_text_style))
    story.append(Spacer(1, 12))
    story.append(Paragraph(section["description"], styles["Italic"]))
    story.append(Spacer(1, 12))

    # Add Base64 Images
    for img_data in section["base64imgs"]:
      img_bytes = base64.b64decode(img_data)
      img = PILImage.open(io.BytesIO(img_bytes))
      img_path = f"temp_{section['title'].replace(' ', '_')}.png"
      img.save(img_path)  # Save temporarily
      story.append(Image(img_path, width=400, height=300))
      story.append(Spacer(1, 24))

  # Add Footer
  footer_text = template["footer"].get("text", "Generated by Report Creator")
  doc.build(
      story,
      onFirstPage=add_footer(footer_text),
      onLaterPages=add_footer(footer_text)
  )
  return file_path


def add_footer(footer_text):
  """
  Adds a footer to each page of the PDF.
  """
  def canvas_draw_footer(canvas, doc):
    canvas.saveState()
    footer = footer_text.format(page_number=doc.page)
    canvas.drawString(30, 40, footer)
    canvas.restoreState()

  return canvas_draw_footer
